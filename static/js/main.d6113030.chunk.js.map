{"version":3,"sources":["componentas/InputComponent.js","componentas/StepsCounter.js","media/alien-dance.gif","App.js","reportWebVitals.js","index.js"],"names":["InputBlock","props","textInput","useRef","className","type","ref","placeholder","onChange","e","setter","current","value","onClick","handle","StepsCounterInput","numberInput","onInput","App","useState","outputs","setOutputs","inputs","setInputs","translationPathString","setTranslationPathString","languagesList","setLanguagesList","steps","setSteps","translationPath","offsetTranslationPath","axios","require","default","v4","useEffect","console","log","get","then","response","data","brokenTranslation","texto","a","foo","i","code","post","translatedText","setTimeout","src","logo","pathArray","offsetPathArray","push","randy","Math","floor","random","tempPathString","length","name","getTranslationPath","StepsCounter","noSteps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6113030.chunk.js","sourcesContent":["import React, {useRef} from \"react\";\r\n\r\nconst InputBlock = (props) => {\r\n    const textInput = useRef(null);\r\n  \r\n    function handleClick() {\r\n        props.handle(textInput.current.value);\r\n  }\r\n    return (\r\n        <div>\r\n        <input\r\n        className=\"ayuda-no-se\"\r\n          type=\"text\"\r\n          ref={textInput} \r\n          placeholder=\"sobres date ogt\"\r\n          onChange={(e) => props.setter(textInput.current.value)}/>\r\n\r\n        <input\r\n        className=\"ayuda-no-se\"\r\n          type=\"button\"\r\n          value=\"sobress\"\r\n          onClick={handleClick}\r\n        />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default InputBlock;","import React, {useRef} from \"react\";\r\n\r\nconst StepsCounterInput = (props) => {\r\n    const numberInput = useRef(null);\r\n\r\n    function handleSteps(){\r\n        props.handle(numberInput.current.value);\r\n    }\r\n\r\n    return(\r\n        <label>\r\n            Numero de saltos:\r\n            <input className=\"ayuda-no-se\" type=\"number\" onInput={handleSteps} ref={numberInput} placeholder='5'></input>\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default StepsCounterInput;","export default __webpack_public_path__ + \"static/media/alien-dance.6057b0da.gif\";","import './App.css';\nimport axios from 'axios';\nimport InputBlock from './componentas/InputComponent';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport { useEffect, useState } from 'react';\nimport StepsCounterInput from './componentas/StepsCounter';\nimport logo from './media/alien-dance.gif';\n\n//intentar cambiar state a array para el pathstring aber k mergas\n\nfunction App() {\n\n  const [outputs, setOutputs] = useState('output shows here');\n  const [inputs, setInputs] = useState('input shows here');\n  const [translationPathString, setTranslationPathString] = useState('');\n  const [languagesList, setLanguagesList] = useState([]);\n  const [steps, setSteps] = useState(5);\n\n  var fileName;\n  var fileContent;\n  var translationPath = [];\n  var offsetTranslationPath = [];\n\n  const handleSteps = (noSteps) => {\n    setSteps(noSteps);\n  }\n\nconst axios = require('axios').default;\nconst { v4: uuidv4 } = require('uuid');\nvar foobar; \n\nuseEffect(()=>{\n  console.log(outputs);\n}, [outputs])\n\nuseEffect(()=>{\n  console.log(translationPathString);\n}, [translationPathString])\n\n\nconst getTranslationPath = () => {\n  let pathArray = [];\n  let offsetPathArray = [];\n  //getLanguageSource();\n  offsetPathArray.push(14);\n  for(let i = 0; i<steps ; i++){\n    let randy = Math.floor(Math.random()*17);\n    pathArray.push(randy);\n    offsetPathArray.push(randy);\n  }\n  pathArray.push(14);\n  translationPath = pathArray;\n  offsetTranslationPath = offsetPathArray;\n  let tempPathString = 'translation path: '\n  for(let i = 0 ; i<translationPath.length-1 ; i++){\n    tempPathString = tempPathString + languagesList[translationPath[i]].name + \" → \";\n  }\n  tempPathString = tempPathString + \"español\";\n  setTranslationPathString(tempPathString);\n  console.log(\"translation path set\");\n}\n\nuseEffect(() => {\n  axios.get(`https://libretranslate.de/languages`)\n      .then((response) => {\n          setLanguagesList(response.data)\n          console.log(response.data)\n      })\n}, [])\n\nuseEffect(()=>{\n}, [translationPathString])\n\nconst getLanguageSource = (texto, lan) =>  {\n  axios.post(`https://libretranslate.de/detect`, {\n            q: texto\n        })\n        .then((response) => {\n            console.log(response.data[0].language);\n            lan = response.data[0].language;\n            console.log(\"getLang triggered\")\n        })\n}\n\nconst handleInputs  = () =>{\n  getTranslationPath();\n  brokenTranslation(steps, inputs);\n}\n\nconst helperFunction = () =>{\n  let array = [];\n  for(let i = 0 ; i<14 ; i++){\n    let rand = Math.floor(Math.random()*17);\n    array.push(rand);\n  }\n  console.log(array)\n}\n\nconst tempTranslate = (texto, lan) => {\n  let data = {\n    q: texto,\n    source: lan,\n    target: 'es'\n  }\n  axios.post(`https://libretranslate.de/translate`, data)\n        .then((response) => {\n            setOutputs(response.data.translatedText)\n        })\n}\n\nconst codesArray = [\n  {0 : ['en', 'fr', 'it', 'pt', 'es']},\n  {1 : ['de', 'id', 'vi']},\n  {2 : ['hi', 'ga', 'pl', 'ru','tr']},\n  {3 : ['ar', 'zh', 'ja', 'ko']}\n];\n\nconst codesKeys = {\n  'fr' : 'francés', 'it' : 'italiano',\n  'pt' : 'portugues', 'en' : 'ingles',\n  'es' : 'español',\n  'de' : 'alemán', 'vi' : 'vietnames',\n  'id' : 'indonesio', 'hi' : 'hindi',\n  'ga' : 'irlandes', 'pl' : 'polaco',\n  'ru' : 'ruso', 'tr' : 'turco',\n  'ar' : 'árabe',\n  'zh' : 'chino', 'ja' : 'japonés',\n  'ko' : 'koreano'\n}\n\nconst handleFileChange = e => {\n}\n\nconst brokenTranslation = async (steps, texto) =>{\n  let foo = texto;\n  console.log(offsetTranslationPath);\n  console.log(translationPath);\n  for (let i = 0 ; i<=steps ; i++){\n    let data = {\n      'q' : texto,\n      'source' : languagesList[offsetTranslationPath[i]].code, \n      'target' : languagesList[translationPath[i]].code\n    }\n    await axios.post(`https://translate.mentality.rip/translate`, data)\n    .then ((response)=>{\n      foo = response.data.translatedText;\n      setOutputs(foo);\n      texto = foo;\n    })\n    setTimeout(()=>{\n    }, 100);\n  }\n}\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"col\">\n        <header className=\"App-header\">\n          <div className=\"row\">\n          <div className=\"col\">\n            <h1>\n            hola mensas :)\n          </h1>\n          </div>\n          <div className=\"col\">\n          <img src={logo} />\n          </div>\n          </div>\n\n          <br/>\n          <input type=\"file\" onChange={handleFileChange}></input>\n        <br/>\n        <InputBlock setter={setInputs} handle={handleInputs}/>\n        <br/>\n        <StepsCounterInput handle={handleSteps}/>\n        <br/>\n        <div className=\"row row-outputs\">\n          <div className=\"Outputs col\">\n            <p>\n              {inputs}\n            </p>\n          </div>\n          <div className=\"Outputs col\">\n            <p>\n              {outputs}\n            </p>\n          </div>\n          \n        </div>\n        <br/>\n        <div className=\"div-chiquito-xd\">\n          <p>\n           {translationPathString}\n         </p>\n        </div>\n        <br/>\n        </header>\n        <div>\n         \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}